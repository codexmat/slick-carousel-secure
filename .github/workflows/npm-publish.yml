# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Publish slick-carousel-secure

on:
  push:
    branches: [ master ]
    paths:
      - 'slick/**'
      - 'package.json'       # publish on version bump too
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      # Detect what changed in this push
      - name: Detect changes
        id: detect
        run: |
          ASSETS_CHANGED=false
          VERSION_CHANGED=false

          if [ "${{ github.event_name }}" = "push" ]; then
            BEFORE="${{ github.event.before }}"
            # If BEFORE isn't in the shallow clone, fall back to files changed in this commit
            if git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
              CHANGED="$(git diff --name-only "${BEFORE}" "${{ github.sha }}")"
            else
              # Fallback: names in the pushed commit itself
              CHANGED="$(git show --name-only --pretty='' "${{ github.sha }}")"
            fi
          else
            # workflow_dispatch: allow publish
            CHANGED="package.json"
          fi

          echo "Changed files:"
          echo "${CHANGED}"

          echo "${CHANGED}" | grep -Eq '^slick/' && ASSETS_CHANGED=true || true
          echo "${CHANGED}" | grep -q '^package.json$' && VERSION_CHANGED=true || true

          echo "assets_changed=${ASSETS_CHANGED}"  >> "$GITHUB_OUTPUT"
          echo "version_changed=${VERSION_CHANGED}" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      # Install/build only if assets changed
      - name: Install dependencies
        if: steps.detect.outputs.assets_changed == 'true'
        run: npm install --no-audit --fund=false

      - name: Build JS/CSS (minify)
        if: steps.detect.outputs.assets_changed == 'true'
        run: |
          if [ -f slick/slick.js ]; then
            npx terser slick/slick.js -o slick/slick.min.js --compress --mangle
          fi
          if [ -f slick/slick.css ]; then
            npx clean-css-cli -o slick/slick.min.css slick/slick.css
          fi
          if [ -f slick/slick-theme.css ]; then
            npx clean-css-cli -o slick/slick-theme.min.css slick/slick-theme.css
          fi

      # See if built artifacts actually changed
      - name: Did artifacts change?
        if: steps.detect.outputs.assets_changed == 'true'
        id: diff
        run: |
          git add slick/slick.min.js slick/slick.min.css slick/slick-theme.min.css 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      # Commit assets only if they changed
      - name: Commit rebuilt assets
        if: steps.diff.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Auto-build slick assets (JS/CSS) [skip ci]"
          git push || true

      # Auto bump version only if assets changed AND you didn't already bump package.json
      - name: Auto bump version
        if: steps.detect.outputs.assets_changed == 'true' && steps.detect.outputs.version_changed != 'true'
        run: |
          npm version prerelease --preid=sec --no-git-tag-version
          git add package.json
          git commit -m "Auto bump version for slick change [skip ci]" || true
          git push || true

      # Publish if (artifacts changed) OR (version bumped in package.json)
      - name: Ensure version not already published
        if: steps.diff.outputs.changed == 'true' || steps.detect.outputs.version_changed == 'true'
        id: version_check
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          if npm view "$PKG@$VER" version >/dev/null 2>&1; then
            echo "already=true" >> "$GITHUB_OUTPUT"
            echo "ℹ️ $PKG@$VER already exists on npm. Skipping publish."
          else
            echo "already=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        if: (steps.diff.outputs.changed == 'true' || steps.detect.outputs.version_changed == 'true') && steps.version_check.outputs.already != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public
